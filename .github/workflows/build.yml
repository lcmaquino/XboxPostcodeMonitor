name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        configuration: [Debug, Release]
        include:
          - os: ubuntu-latest
            artifact_name: linux-x64
            runtime: linux-x64
          - os: windows-latest
            artifact_name: win-x64
            runtime: win-x64
          - os: macos-latest
            artifact_name: osx-x64
            runtime: osx-x64
            matrix: osx-x64
          - os: macos-latest
            artifact_name: osx-arm64
            runtime: osx-arm64
            matrix: osx-arm64

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      #- name: Set version
      #  id: version
      #  run: |
      #    if [[ $GITHUB_REF == refs/tags/* ]]; then
      #      VERSION=${GITHUB_REF#refs/tags/v}
      #    else
      #      VERSION=$(git describe --tags --always --dirty --match "v*" | sed 's/^v//')
      #    fi
      #    echo "VERSION=$VERSION" >> $GITHUB_ENV
      #    echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: |
          dotnet build --no-restore --configuration ${{ matrix.configuration }}
          #    -p:Version=${{ env.VERSION }} \
          #    -p:AssemblyVersion=${{ env.VERSION }}.0 \
          #    -p:FileVersion=${{ env.VERSION }}.0

      - name: Publish
        shell: bash
        run: |
          dotnet publish --configuration ${{ matrix.configuration }} \
            -r ${{ matrix.runtime }} \
            --self-contained true \
            -p:PublishSingleFile=true \
            -p:IncludeNativeLibrariesForSelfExtract=true
            #   -p:Version=${{ env.VERSION }} \
            #   -p:AssemblyVersion=${{ env.VERSION }}.0 \
            #   -p:FileVersion=${{ env.VERSION }}.0

      - name: Create artifact directory
        shell: bash
        run: mkdir -p artifacts/${{ matrix.artifact_name }}/${{ matrix.configuration }}

      - name: Copy artifacts
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp -r PostCodeSerialMonitor/bin/${{ matrix.configuration }}/net9.0/${{ matrix.runtime }}/publish/* artifacts/${{ matrix.artifact_name }}/${{ matrix.configuration }}/
          else
            cp -r PostCodeSerialMonitor/bin/${{ matrix.configuration }}/net9.0/${{ matrix.runtime }}/publish/* artifacts/${{ matrix.artifact_name }}/${{ matrix.configuration }}/
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-${{ matrix.configuration }}
          path: artifacts/${{ matrix.artifact_name }}/${{ matrix.configuration }}
          retention-days: 5

  release:
    name: Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release packages
        shell: bash
        run: |
          # Create a directory for release packages
          mkdir -p release-packages
          
          # Get the version from the tag
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Create zip files for each platform and configuration
          for platform in linux-x64 win-x64 osx-x64 osx-arm64; do
            for config in Debug Release; do
              if [ -d "artifacts/$platform-$config" ]; then
                cd artifacts/$platform-$config
                zip -r "../../release-packages/PostCodeSerialMonitor-$VERSION-$platform-$config.zip" .
                cd ../..
              fi
            done
          done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-packages/*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 